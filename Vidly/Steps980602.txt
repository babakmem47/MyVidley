- Create this textbox!

- Create a class: R-click on Model folder - > Add  ->  Class...  ->  Movie.cs     
		public class Movie
			{
				public int Id { get; set; }
				public string Name { get; set; }
			}
		}

- Create a Controller: R-click on Controller folder - > Add  ->  Controller...  ->  MVC 5 Controller - Empty  - > name it: MoviesController
	namespace Vidly.Controllers
	{
		public class MoviesController : Controller
		{
			// GET: Movies
			public ActionResult Index()
			{
				return View();
			}
		}
	}

- change the Index action name to 'Random' and create obj to send to View
		// GET: Movies/Random
		public ActionResult Random()
		{
			var movie = new Movie() { Name = "Matrix" };
			return View(movie);
		}

- Create a view: Random.cshtml:  Alt + Enter on Random name or R-click on /View/Movies -> New View
		@model Vidly.Models.Movie
		@{
			ViewBag.Title = "Random";
			Layout = "~/Views/Shared/_Layout.cshtml";
		}

		<h2>@Model.Name</h2>

//// CHANGE A THEME ///// 
- go to www.bootswatch.com -> https://bootswatch.com/3/  -> download Lumen bootstrap -> rename it to bootstrap-lumen.css 
-> save it to Content folder -> R-click on Content -> Add -> Existing item...  -> select bootstrap-lumen.css

	Change a reference(replace original bootstrap.css with bootstrap-lumen.css)
- in BundleConfig.cs: rename bootstrap.css in "~/Content/bootstrap.css" with bootstrap-lumen.css
		bundles.Add(new StyleBundle("~/Content/css").Include(
							  "~/Content/bootstrap-lumen.css",
							  "~/Content/site.css"));

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////// 02 ASP.NET MVC Fundamentals /////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//// 10. Action Result /////
- our action in controller return 'ActionResult' which is a base class and have many sub types like: 
  ViewResult, PartialViewResult, ContentResult, RedirectResult, JsonResult, FileResult, HttpNotFoundResult, EmptyResult.

- return View(...) :  View method allow us to quickly create a view result. alternatively we can use this:
		return new ViewResult();   === return View(movie);
  but the first approach is most common among developers

  we also use others like:
	return HttpContext("Hello World");	=> return "Hello World" on the page
	return HttpNotFound();				=> return 404 page error result

  we can redirect the user from one page to another:
	return RedirectToAction("Index", "Home", new {page = 1, sortBy = "name"});

  the 3th argument: passing argument to the target action

		result: in URL: http://localhost:28363/?page=1&sortBy=name => means we redirected to the home page



- We could set the return type to 'ViewResult'. This is actually a good practice for UnitTesting
	public ViewResult Random()
  
  but ActionResult is more general and include more sub types


//// 11. Action Parameters /////
Action Result: the output of out actions
Action Parameters: the input of out actions   MVC map any requests to parameters value for action request

	Reuest  ==>  MVC FrameWork  ==>  Action

Parameter values can be embedded in:
	- In the URL:							/movies/edit/1
	- In the query string:					/movies/edit?id=1
	- In the data posted using the form:	id =1

Test this:
- Create an Edit action:
		public ActionResult Edit(int id)
		{
			return Content("id= " + id);
		}
run -> enter /movies/edit/1 and /movies/edit?id=1 in the URL -> the page show id = 1

but if replace id with movieId in our Action it dosn't work!

		public ActionResult Edit(int movieId)
		{
			return Content("movieId= " + movieId);
		}

Unless we change URL to this : /movies/edit?movieId=1

this is because of this line in RouteConfig: 
				url: "{controller}/{action}/{id}",


- We can also use optional parameter:
		public ActionResult Index(int? pageindex, string sortBy)
		{
			if (!pageindex.HasValue)
				pageindex = 1;

			if (String.IsNullOrWhiteSpace(sortBy))
				sortBy = "Name";

			return Content(String.Format("pageIndex = {0} & sortBy = {1}", pageindex, sortBy));
		}
	the build the project and set url to  http://localhost:..../movies

	We can overwrite this parameter:
										http://localhost:..../movies?pageIndex=2
										http://localhost:..../movies?pageIndex=2&sortBy=releaseDate
